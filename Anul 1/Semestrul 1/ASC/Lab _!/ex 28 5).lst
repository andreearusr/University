     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 07                          a db 7
    14 00000001 0C                          b db 12
    15 00000002 3E                          c db 62
    16 00000003 29                          d db 41
    17                                      
    18 00000004 0500                        e dw 5
    19 00000006 6E00                        f dw 110
    20 00000008 0100                        g dw 1
    21 0000000A 1E00                        h dw 30
    22                                  
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:;...(e+g-h)/3+ b*c
    26 00000000 A1[04000000]                    mov EAX,[e]; EAX=e 
    27 00000005 0305[08000000]                  add EAX,[g]; EAX=e+g 
    28 0000000B 2B05[0A000000]                  sub EAX,[h]; EAX=e+g-h 
    29 00000011 50                              push EAX
    30 00000012 6658                            pop AX
    31 00000014 665A                            pop DX
    32                                          
    33 00000016 66BB0300                        mov BX,3; BX=3
    34 0000001A 66F7F3                          div BX; AX=DX:AX/BX DX=DX:AX%BX
    35 0000001D 6689C3                          mov BX,AX;BX=AX 
    36                                          
    37 00000020 8A25[02000000]                  mov AH,[c]; AH=c 
    38 00000026 A0[01000000]                    mov AL,[b];AL=b 
    39 0000002B F6E4                            mul AH; AX=AL*AH=b*c
    40                                          
    41 0000002D 6601C3                          add BX,AX; BX=BX+AX=(e+g-h)/3+b*c
    42                                      
    43                                          ; exit(0)
    44 00000030 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    45 00000032 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
