     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 0308020A070109              S db 3,8,2,10,7,1,9
    14                                      l equ $-S
    15 00000007 00                          max_pare db 0
    16 00000008 00                          min_impare db 0
    17                                  
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ; ... se da un sir de octeti S. Sa se detetrmine:
    22                                          ;                                     maximul elem de pe pozitiile pare
    23                                          ;                                     minimul elem de pe pozitiile impare
    24                                          
    25 00000000 BE00000000                      mov ESI,0
    26 00000005 B000                            mov AL,0   ; in AL calculam maximul de pe pozitiile pare
    27 00000007 B300                            mov BL,0   
    28 00000009 B907000000                      mov ECX, l
    29                                          
    30 0000000E E318                            jecxz Urmatorul 
    31                                          transforma_pare:
    32 00000010 8A9E[00000000]                      mov BL,[S+ESI]   ; pozitia curenta in sir
    33 00000016 38D8                                cmp AL,BL
    34 00000018 7702                                    ja continua1
    35 0000001A 88D8                                    mov AL,BL
    36                                              continua1:
    37 0000001C 83C602                                  add ESI,2
    38 0000001F 39CE                            cmp ESI,ECX
    39 00000021 72ED                            jb transforma_pare
    40                                          
    41 00000023 A2[07000000]                    mov [max_pare], AL
    42                                          
    43                                          
    44                                          Urmatorul:
    45 00000028 BE01000000                      mov ESI,1
    46 0000002D B000                            mov AL,0   ; in Al calculam minimul de pe pozitiile impare
    47 0000002F B300                            mov BL,0
    48 00000031 B907000000                      mov ECX,l
    49                                          
    50 00000036 E318                            jecxz final
    51                                          transforma_impare:
    52 00000038 8A9E[00000000]                      mov BL,[S+ESI]   ; pozitia curenta in sir
    53 0000003E 38D8                                cmp AL,BL
    54 00000040 7202                                    jb continua2
    55 00000042 88D8                                    mov AL,BL
    56                                              continua2:
    57 00000044 83C602                                  add ESI,2
    58 00000047 39CE                            cmp ESI,ECX
    59 00000049 72ED                            jb transforma_impare
    60                                          
    61 0000004B A2[08000000]                    mov [min_impare], AL 
    62                                          
    63                                          final:
    64                                          ; exit(0)
    65 00000050 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    66 00000052 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
