     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,fopen,fclose,printf,fscanf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import fopen msvcrt.dll
    11                                  import fclose msvcrt.dll
    12                                  import printf msvcrt.dll
    13                                  import fscanf msvcrt.dll
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16 00000000 696E63657263617265-             nume_fisier db "incercare.txt",0
    16 00000009 2E74787400         
    17 0000000E 7200                            mod_acces db "r",0
    18 00000010 FFFFFFFF                        descriptor_fis dd -1
    19 00000014 00<rept>                        text times 50 db 0
    20                                          
    21 00000046 00000000                        contor dd 0
    22 0000004A 736972756C20657374-             format db "sirul este:%s ",0
    22 00000053 653A25732000       
    23 00000059 25642000                        format1 db "%d ",0
    24 0000005D 00<rept>                        sir_initial times 100 db 0
    25                                  
    26                                  ; our code starts here
    27                                  segment code use32 class=code
    28                                      start:
    29                                          ;fopen(nume_fisier,mod_acces)
    30 00000000 68[0E000000]                    push dword mod_acces
    31 00000005 68[00000000]                    push dword nume_fisier
    32 0000000A FF15[00000000]                  call[fopen]
    33 00000010 83C408                          add ESP, 4*2
    34                                          
    35 00000013 83F800                          cmp EAX,0
    36 00000016 745C                            je final
    37                                          
    38 00000018 A3[10000000]                    mov [descriptor_fis],EAX
    39 0000001D BF[5D000000]                    mov EDI, sir_initial
    40                                          
    41                                          bucla:
    42                                         
    43 00000022 68[14000000]                        push dword text
    44 00000027 68[59000000]                        push format1
    45 0000002C FF35[10000000]                      push dword [descriptor_fis] 
    46 00000032 FF15[00000000]                      call [fscanf]                   
    47 00000038 83C40C                              add ESP, 4*3
    48                                              
    49 0000003B 83F800                              cmp EAX,0
    50 0000003E 7425                                je done
    51                                                
    52 00000040 A1[14000000]                        mov EAX,[text]
    53                                              
    54 00000045 FC                                  cld
    55 00000046 AB                                  stosd
    56                                              
    57                                              
    58 00000047 FF05[46000000]                      inc dword[contor]
    59                                              
    60 0000004D 50                                  push dword EAX
    61 0000004E 68[59000000]                        push dword format1
    62 00000053 FF15[00000000]                      call [printf]
    63 00000059 83C408                              add ESP,4*2
    64                                              
    65 0000005C 833D[46000000]04                    cmp dword[contor],4
    66 00000063 72BD                            jb bucla
    67                                              
    68                                          
    69                                          done:
    70                                          
    71                                          ;fclose(descriptor_fis)
    72 00000065 FF35[10000000]                  push dword[descriptor_fis]
    73 0000006B FF15[00000000]                  call [fclose]
    74 00000071 83C404                          add ESP, 4*1
    75                                          
    76                                          final :  
    77                                          
    78                                          ; exit(0)
    79 00000074 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    80 00000076 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
