     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 0103FEFB03F80500                s db 1,3,-2,-5,3,-8,5,0
    14                                          l equ $-s 
    15 00000008 00<rept>                        d1 times l db 0
    16 00000010 00<rept>                        d2 times l db 0
    17                                  
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ; ...Se da un sir de octeti S. Sa se construiasca un sir D1 care sa cont toate numerele pozitive
    22                                          ; si un sir D2 care sa contina toate numerele negative din S
    23                                          
    24 00000000 B908000000                      mov ECX,l 
    25 00000005 BE00000000                      mov ESI,0
    26 0000000A BF00000000                      mov EDI,0
    27 0000000F E314                            jecxz sfarsit1
    28                                          
    29                                          repeta1:
    30 00000011 8A86[00000000]                      mov AL,[s+ESI]
    31 00000017 3C00                                cmp AL,0
    32 00000019 7807                                js notpozitiv
    33 0000001B 8887[08000000]                      mov [d1+EDI],AL
    34 00000021 47                                  inc EDI
    35                                              notpozitiv:
    36 00000022 46                                      inc ESI 
    37 00000023 E2EC                            loop repeta1
    38                                          
    39                                          sfarsit1:
    40 00000025 B908000000                      mov ECX,l
    41 0000002A BE00000000                      mov ESI,0
    42 0000002F BF00000000                      mov EDI,0
    43 00000034 E314                            jecxz sfarsit2
    44                                          
    45                                          repeta2:
    46 00000036 8A86[00000000]                      mov AL,[s+ESI]
    47 0000003C 3C00                                cmp AL,0
    48 0000003E 7907                                jns notnegativ
    49 00000040 8887[10000000]                      mov [d2+EDI],AL
    50 00000046 47                                  inc EDI
    51                                              notnegativ:
    52 00000047 46                                      inc ESI
    53 00000048 E2EC                            loop repeta2
    54                                          
    55                                          sfarsit2:
    56                                          ; exit(0)
    57 0000004A 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    58 0000004C FF15[00000000]                  call    [exit]       ; call exit to terminate the program
