     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; se da un sir de caract s. Construiti sirul d care sa cont toate caracterele cifre din sirul s
    14 00000000 2B34326138347835            s db '+','4','2','a','8','4','x','5'
    15                                      l equ $-s 
    16 00000008 00<rept>                    d times l db 0
    17                                  
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21 00000000 B908000000                      mov ECX,l
    22 00000005 BB00000000                      mov EBX,0
    23 0000000A BE00000000                      mov ESI,0
    24                                          
    25                                          Repet:
    26 0000000F 8A86[00000000]                      mov AL,[s+ESI]
    27 00000015 3C30                                cmp AL,'0';    se compara codul ASCII al lui AL cu codul ASCII al lui 0
    28 00000017 720B                                jb skip;       daca Al<0 se sare la skip
    29 00000019 3C39                                cmp AL,'9'
    30 0000001B 7707                                ja skip
    31 0000001D 8886[08000000]                      mov [d+ESI], AL
    32                                              
    33 00000023 43                                  inc EBX
    34                                              skip:
    35 00000024 46                                      inc ESI
    36 00000025 E2E8                            loop Repet
    37                                      
    38                                          ; exit(0)
    39 00000027 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    40 00000029 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
