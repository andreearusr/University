     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,printf,scanf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import printf msvcrt.dll
    11                                  import scanf msvcrt.dll
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14                                          
    15 00000000 00000000                        car dd 0
    16 00000004 416E64726569206172-             s db "Andrei are mere",0
    16 0000000D 65206D65726500     
    17 00000014 436172616374657220-             mesaj1 db "Caracter introdus: ",0
    17 0000001D 696E74726F6475733A-
    17 00000026 2000               
    18 00000028 4E756D6172756C2064-             mesaj2 db "Numarul de aparitii: ",0
    18 00000031 652061706172697469-
    18 0000003A 693A2000           
    19 0000003E 2000                            space db " ",0
    20 00000040 256300                          format db "%c",0
    21 00000043 256400                          format2 db "%d",0
    22                                  
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26                                          ; Se da un sir de caractere(def in segm de date). Sa se citeasca de la tastatura un caracter, sa se det nr de aparitii
    27                                          ; al acelui caract in sirul dat si sa se afiseze acel caracter impreuna cu nr de aparitii
    28                                      
    29 00000000 BB00000000                      mov EBX,0
    30                                          
    31 00000005 68[00000000]                    push dword car
    32 0000000A 68[40000000]                    push dword format
    33 0000000F FF15[00000000]                  call[scanf]
    34 00000015 83C408                          add ESP,4*2
    35                                          
    36 00000018 BE[04000000]                    mov ESI,s
    37 0000001D A1[00000000]                    mov EAX,[car]
    38 00000022 88C4                            mov AH,AL    ;punem in ah caracterul
    39 00000024 FC                              cld          ; parcurgem sirul de la stanga la dreapta
    40                                          nr_aparitii:
    41 00000025 AC                                  lodsb    ; punem in al caracter cu caracter
    42 00000026 3C00                                cmp AL,0
    43 00000028 7409                                jz done
    44                                              
    45 0000002A 38E0                                cmp AL,AH
    46 0000002C 7501                                jne nu_cresc_nr_aparitii
    47 0000002E 43                                  inc EBX   ; creste nr de aparitii
    48                                              
    49                                          nu_cresc_nr_aparitii:
    50 0000002F 3C00                                cmp AL,0
    51 00000031 75F2                                jnz nr_aparitii   ; daca nu s-a ajuns inca la 0 se repeta
    52                                              
    53                                          done:
    54 00000033 68[14000000]                        push dword mesaj1
    55 00000038 FF15[00000000]                      call[printf]
    56 0000003E 83C404                              add ESP,4*1
    57                                              
    58 00000041 68[00000000]                        push dword car 
    59 00000046 FF15[00000000]                      call [printf]   ; afisam mesajul "Caracter introdus: " si caracterul introdus
    60 0000004C 83C404                              add ESP,4*1
    61                                              
    62 0000004F 68[3E000000]                        push dword space
    63 00000054 FF15[00000000]                      call [printf]
    64 0000005A 83C404                              add ESP, 4*1
    65                                              
    66 0000005D 68[28000000]                        push dword mesaj2
    67 00000062 FF15[00000000]                      call[printf]
    68 00000068 83C404                              add ESP,4*1
    69                                              
    70 0000006B 53                                  push dword EBX
    71 0000006C 68[43000000]                        push dword format2
    72 00000071 FF15[00000000]                      call[printf]   ; afisam mesajul "Numarul de aparitii: " si numarul de aparitii
    73 00000077 83C408                              add ESP, 4*2
    74                                              
    75                                              
    76                                              
    77                                          
    78                                          ; exit(0)
    79 0000007A 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    80 0000007C FF15[00000000]                  call    [exit]       ; call exit to terminate the program
