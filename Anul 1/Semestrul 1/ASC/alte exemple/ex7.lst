     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,printf,scanf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  import printf msvcrt.dll
    12                                  import scanf msvcrt.dll
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15 00000000 00000000                    n dd 0
    16 00000004 6E203D2000                  mesaj db "n = ",0
    17 00000009 257800                      format db "%x",0
    18 0000000C 4E756D6172756C2069-         mesaj2 db "Numarul in baza 10 fara semn este:",0
    18 00000015 6E2062617A61203130-
    18 0000001E 20666172612073656D-
    18 00000027 6E20657374653A00   
    19 0000002F 257500                      format2 db "%u",0
    20 00000032 20204E756D6172756C-         mesaj3 db "  Numarul in baza 10 cu semn este:",0
    20 0000003B 20696E2062617A6120-
    20 00000044 31302063752073656D-
    20 0000004D 6E20657374653A00   
    21 00000055 256400                      format3 db "%d",0
    22                                  
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26 00000000 68[04000000]                    push dword mesaj
    27 00000005 FF15[00000000]                  call [printf]
    28 0000000B 83C404                          add ESP, 4*1
    29                                          
    30 0000000E 68[00000000]                    push dword n 
    31 00000013 68[09000000]                    push dword format
    32 00000018 FF15[00000000]                  call [scanf]
    33 0000001E 83C408                          add ESP, 4*2
    34                                          
    35 00000021 68[0C000000]                    push dword mesaj2
    36 00000026 FF15[00000000]                  call[printf]
    37 0000002C 83C404                          add ESP, 4*1
    38                                          
    39 0000002F A1[00000000]                    mov EAX,[n]
    40                                          
    41 00000034 88C3                            mov BL,AL
    42 00000036 B800000000                      mov EAX,0
    43 0000003B 88D8                            mov AL,BL
    44                                          
    45 0000003D 60                              pushad
    46                                          
    47 0000003E 50                              push dword EAX 
    48 0000003F 68[2F000000]                    push dword format2
    49 00000044 FF15[00000000]                  call[printf]
    50 0000004A 83C408                          add ESP,4*2
    51                                          
    52 0000004D 61                              popad
    53                                          
    54 0000004E 6698                            cbw
    55 00000050 98                              cwde
    56                                          
    57 00000051 60                              pushad
    58 00000052 68[32000000]                    push dword mesaj3
    59 00000057 FF15[00000000]                  call[printf]
    60 0000005D 83C404                          add ESP, 4*1
    61 00000060 61                              popad
    62                                          
    63 00000061 50                              push dword EAX
    64 00000062 68[55000000]                    push dword format3
    65 00000067 FF15[00000000]                  call [printf]
    66 0000006D 83C408                          add ESP, 4*2
    67                                          
    68                                      
    69                                          ; exit(0)
    70 00000070 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    71 00000072 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
