     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,printf,scanf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import printf msvcrt.dll
    11                                  import scanf msvcrt.dll
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14 00000000 00000000                    a dd 0
    15 00000004 00000000                    b dd 0
    16 00000008 00000000                    rezultat dd 0
    17 0000000C 613D00                      mesaj_a db "a=",0
    18 0000000F 623D00                      mesaj_b db "b=",0
    19 00000012 28612B62292F28612D-         mesaj_rezultat db "(a+b)/(a-b) = %d",0
    19 0000001B 6229203D20256400   
    20 00000023 4E7520736520706F61-         mesaj_divide_by_zero db "Nu se poate imparti la zero!",0
    20 0000002C 746520696D70617274-
    20 00000035 69206C61207A65726F-
    20 0000003E 2100               
    21 00000040 256400                      format_citire db "%d",0
    22                                  
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26                                          ; ...Sa se citeasca de la tastatura 2 nr a si b (in baza 10) si sa se calculeze (a+b)/(a-b)
    27                                          ; Catul imp se va salva in memorie in variabila rezultat
    28                                          ; Valorile se considera cu semn
    29                                          
    30 00000000 68[0C000000]                    push dword mesaj_a
    31 00000005 FF15[00000000]                  call[printf]
    32 0000000B 83C404                          add ESP,4*1
    33                                          
    34 0000000E 68[00000000]                    push dword a
    35 00000013 68[40000000]                    push dword format_citire
    36 00000018 FF15[00000000]                  call[scanf]
    37 0000001E 83C408                          add ESP,4*2
    38                                          
    39 00000021 68[0F000000]                    push dword mesaj_b
    40 00000026 FF15[00000000]                  call[printf]
    41 0000002C 83C404                          add ESP,4*1
    42                                          
    43 0000002F 68[04000000]                    push dword b
    44 00000034 68[40000000]                    push dword format_citire
    45 00000039 FF15[00000000]                  call[scanf]
    46 0000003F 83C408                          add ESP, 4*2
    47                                          
    48 00000042 A1[00000000]                    mov EAX,[a]
    49 00000047 0305[04000000]                  add EAX,[b]
    50 0000004D 99                              cdq
    51 0000004E 8B1D[00000000]                  mov EBX,[a]
    52 00000054 2B1D[04000000]                  sub EBX,[b]
    53 0000005A 83FB00                          cmp EBX,0
    54 0000005D 741D                            je divide_by_zero
    55 0000005F F7FB                            idiv EBX
    56 00000061 A3[08000000]                    mov [rezultat],EAX 
    57                                          
    58                                          
    59 00000066 FF35[08000000]                  push dword[rezultat]
    60 0000006C 68[12000000]                    push dword mesaj_rezultat
    61 00000071 FF15[00000000]                  call[printf]
    62 00000077 83C408                          add ESP, 4*2
    63                                          
    64 0000007A EB0E                            jmp final
    65                                          
    66                                          divide_by_zero:
    67 0000007C 68[23000000]                        push dword mesaj_divide_by_zero
    68 00000081 FF15[00000000]                      call[printf]
    69 00000087 83C404                              add ESP, 4*1
    70                                          final:
    71                                          
    72                                          ; exit(0)
    73 0000008A 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    74 0000008C FF15[00000000]                  call    [exit]       ; call exit to terminate the program
