     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...se dau 2 siruri de octeti a si b. sa se constr sirul r care sa cont 
    14                                      ;  elem lui b in ordine inversa
    15                                      
    16 00000000 32313333343236              a db '2133426'
    17                                      la equ $-a
    18 00000007 343537363231                b db '457621'
    19                                      lb equ $-b 
    20 0000000D 00<rept>                    r times 2 db 0
    21                                  
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25 00000000 B906000000                      mov ECX, lb 
    26 00000005 BE00000000                      mov ESI,0
    27 0000000A BF05000000                      mov EDI, lb-1
    28 0000000F 66B80000                        mov AX,0
    29 00000013 E310                            jecxz Sfarsit
    30                                          
    31                                          Repeta:
    32 00000015 8A87[07000000]                      mov AL,[b+EDI]
    33 0000001B 8886[0D000000]                      mov [r+ESI],AL
    34 00000021 46                                  inc ESI
    35 00000022 4F                                  dec EDI
    36 00000023 E2F0                            loop Repeta
    37                                          Sfarsit:
    38                                          
    39 00000025 B907000000                      mov ECX,la
    40 0000002A BE00000000                      mov ESI,0
    41 0000002F BF00000000                      mov EDI,0
    42 00000034 66B80000                        mov AX,0
    43 00000038 E314                            jecxz Sfarsit1
    44                                          Repeta1:
    45 0000003A 8A86[00000000]                      mov AL,[a+ESI]
    46 00000040 A801                                test AL,1;  sau and AL,1
    47 00000042 7B07                                jpo sari
    48 00000044 8887[13000000]                      mov [r+lb+EDI],AL;  muta in AL elem pare a lui a
    49 0000004A 47                                  inc EDI
    50                                              sari:
    51 0000004B 46                                      inc ESI
    52 0000004C E2EC                            loop Repeta1
    53                                          Sfarsit1:
    54 0000004E 668B1D[0D000000]                mov BX,[r]
    55                                      
    56                                          ; exit(0)
    57 00000055 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    58 00000057 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
