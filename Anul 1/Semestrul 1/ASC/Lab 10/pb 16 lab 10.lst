     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,fopen,fread,fclose,printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import printf msvcrt.dll
    11                                  import fopen msvcrt.dll
    12                                  import fread msvcrt.dll
    13                                  import fclose msvcrt.dll
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16 00000000 6669736965722E7478-             nume_fisier db "fisier.txt",0
    16 00000009 7400               
    17 0000000B 7200                            mod_acces db "r",0
    18 0000000D FFFFFFFF                        descriptor_fis dd -1
    19 00000011 00                              text db 0
    20                                      
    21 00000012 00000000                        contor_y dd 0
    22 00000016 00000000                        contor_z dd 0
    23 0000001A 2564206C6974657265-             format db "%d litere y si %d litere z",0
    23 00000023 207920736920256420-
    23 0000002C 6C6974657265207A00 
    24                                      
    25                                  ; our code starts here
    26                                  segment code use32 class=code
    27                                      start:
    28                                          ; ...Se da un fisier text. Sa se citeasca continutul fisierului, sa se contorizeze nr-ul de litere
    29                                          ; 'y' si 'z' si sa se afiseze aceste valori. Numele fisierului este definit in segmentul de date
    30                                          
    31                                          ;fopen(nume_fisier,mod_acces)
    32 00000000 68[0B000000]                    push dword mod_acces
    33 00000005 68[00000000]                    push dword nume_fisier
    34 0000000A FF15[00000000]                  call[fopen]
    35 00000010 83C408                          add ESP, 4*2
    36                                          
    37 00000013 83F800                          cmp EAX,0
    38 00000016 746D                            je final
    39                                          
    40 00000018 A3[0D000000]                    mov [descriptor_fis],EAX
    41                                          
    42                                          bucla:
    43                                              ;fread(text,size,count,descriptor_fis)
    44 0000001D FF35[0D000000]                      push dword [descriptor_fis]
    45 00000023 6A01                                push dword 1
    46 00000025 6A01                                push dword 1
    47 00000027 68[11000000]                        push dword text
    48 0000002C FF15[00000000]                      call [fread]
    49 00000032 83C410                              add ESP, 4*4
    50                                              
    51 00000035 83F800                              cmp EAX,0
    52 00000038 7422                                je cleanup
    53                                  
    54 0000003A 8A0D[11000000]                      mov CL, [text]
    55 00000040 80F979                              cmp CL,'y'
    56 00000043 7407                                je calc_y
    57                                              
    58 00000045 80F97A                              cmp CL,'z'
    59 00000048 740A                                je calc_z
    60                                              
    61 0000004A EBD1                                jmp bucla
    62                                              calc_y:
    63 0000004C FF05[12000000]                          inc dword[contor_y]
    64                                              
    65 00000052 EBC9                                jmp bucla 
    66                                              calc_z:
    67 00000054 FF05[16000000]                          inc dword[contor_z]
    68                                             
    69 0000005A EBC1                            jmp bucla
    70                                          
    71                                      cleanup:
    72                                          ;printf(format,val1,val2)
    73 0000005C FF35[16000000]                  push dword [contor_z]
    74 00000062 FF35[12000000]                  push dword [contor_y]
    75 00000068 68[1A000000]                    push dword format
    76 0000006D FF15[00000000]                  call[printf]
    77 00000073 83C40C                          add ESP,4*3
    78                                          
    79                                          ;fclose(descriptor_fis)
    80 00000076 FF35[0D000000]                  push dword[descriptor_fis]
    81 0000007C FF15[00000000]                  call [fclose]
    82 00000082 83C404                          add ESP, 4*1
    83                                          
    84                                      final:
    85                                              
    86                                          ; exit(0)
    87 00000085 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    88 00000087 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
