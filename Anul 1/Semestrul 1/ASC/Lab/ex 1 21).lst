     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 04                          a db 4
    14 00000001 0A00                        b dw 10
    15 00000003 0F000000                    c dd 15
    16 00000007 2D00000000000000            d dq 45
    17                                  
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ;(c-a) + (b-d) + d ; interpretare fara semn 
    22                                          
    23 00000000 A0[00000000]                    mov AL,[a]; AL=a 
    24 00000005 B400                            mov AH,0; AX=a 
    25 00000007 6689C3                          mov BX,AX; BX=AX 
    26 0000000A B800000000                      mov EAX,0
    27 0000000F 6689D8                          mov AX,BX; AX=BX 
    28 00000012 666A00                          push word 0
    29 00000015 6650                            push AX
    30 00000017 58                              pop EAX; EAX=a 
    31 00000018 8B1D[03000000]                  mov EBX,[c]; EBX=c 
    32 0000001E 29C3                            sub EBX,EAX; EBX=c-a
    33 00000020 B900000000                      mov ECX,0; ECX:EBX= c-a
    34                                          
    35 00000025 A1[01000000]                    mov EAX,[b]
    36 0000002A BA00000000                      mov EDX,0; EDX:EAX=b 
    37 0000002F 2B05[07000000]                  sub EAX, dword[d]
    38 00000035 1B15[0B000000]                  sbb EDX, dword[d+4]; EDX:EAX= b-d 
    39                                          
    40 0000003B 01D8                            add EAX,EBX
    41 0000003D 11CA                            adc EDX,ECX; EDX:EAX= (c-a)+(b-d)
    42                                          
    43 0000003F 0305[07000000]                  add EAX, dword[d]
    44 00000045 1315[0B000000]                  adc EDX, dword[d+4]; EDX:EAX= (c-a)+(b-d)+d
    45                                          
    46                                      
    47                                          ; exit(0)
    48 0000004B 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    49 0000004D FF15[00000000]                  call    [exit]       ; call exit to terminate the program
