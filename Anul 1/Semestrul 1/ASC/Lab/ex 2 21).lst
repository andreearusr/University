     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 07                          a db 7
    14 00000001 F7FF                        b dw -9
    15 00000003 0C000000                    c dd 12
    16 00000007 E2FFFFFFFFFFFFFF            d dq -30
    17                                  
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ; d-a + (b+a-c) ; interpretare cu semn
    22                                          
    23 00000000 8B1D[07000000]                  mov EBX,dword[d]
    24 00000006 8B0D[0B000000]                  mov ECX,dword[d+4]; ECX:EBX = d
    25 0000000C A0[00000000]                    mov AL,[a]
    26 00000011 6698                            cbw; AX=a 
    27 00000013 98                              cwde; EAX=a 
    28 00000014 99                              cdq; EDX:EAX=a 
    29                                          
    30 00000015 29C3                            sub EBX,EAX
    31 00000017 19D1                            sbb ECX,EDX; ECX:EBX=d-a 
    32                                          
    33 00000019 A0[00000000]                    mov AL,[a]
    34 0000001E 6698                            cbw; AX=a 
    35 00000020 668B1D[01000000]                mov BX,[b]
    36 00000027 6601D8                          add AX,BX; AX=b+a 
    37 0000002A 98                              cwde; EAX= b+a 
    38 0000002B 8B15[03000000]                  mov EDX,[c]
    39 00000031 29D0                            sub EAX,EDX; EAX=b+a-c 
    40 00000033 99                              cdq; EDX:EAX= b+a-c 
    41                                          
    42 00000034 01C3                            add EBX,EAX
    43 00000036 11D1                            adc ECX,EDX; ECX:EDX= d-a+(b+a-c)
    44                                          
    45                                          ; exit(0)
    46 00000038 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    47 0000003A FF15[00000000]                  call    [exit]       ; call exit to terminate the program
